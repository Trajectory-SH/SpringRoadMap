서블릿 -> jsp -> mvc 패턴
문제점이 발생하고 문제를 해결하는 방식으로 진행...

회원 엔티티(도메인 모델)

JSP의 한계가 존재하는데...
두 가지 일을 하나의 페이지에서 진행하는 느낌한다. -> 비즈니스 로직과 뷰를 렌더링하는 부분이 같이 존재한다.
서블릿 -> JSP
뷰를 보여주는 HTML부분은 정말 깔끔하다.
코드 상위의 절반은 비즈니스 로직, 나머지 하위는 HTML로 보여주기 위한 뷰 영역이다.

-> 수많은 비즈니스 로직들이 코드에 노출이 되어있다. -> 실무에 들어가면 수천줄이 넘어가는데 이러면 JSP 지옥이 펼쳐진다...

MVC 패턴의 등장
보여주는 것과 조종하는 것을 분리한다.
JSP는 목적에 맞게 HTML로 화면을 그리는 일에 집중한다. -> 서블릿과 JSP를 이용해서 MVC 패턴을 구현해봅시다

[MVC 패턴 개요]
하나의 서블릿이나 JSP가 너무 많은 역할을 하게 된다.
뷰와 비즈니스 로직의 변경의 라이프 사이클이 다르다. -> JSP는 화면을 렌더링 하는데 최적화가 되어있다.
=> 컨트롤러와 뷰 영역으로 역할을 나눈다.
컨트롤러 -> 비즈니스 로직을 수행
모델에 데이터를 담고 모델을 통해서 데이터들을 전달한다.
view 로직에 제어권을 넘기고 모델에 있는 데이터를 활용해 화면을 그려준다. -> 뷰 로직이 비즈니스 로직과의 의존관계가 끊어진다.
-> 대부분 VIEW는 Html을 만들어준다.

일반적으로 비즈니스 로직은 Service라는 것을 따로 만들어서 처리하는 것이 일반적이다.

비즈니스 로직을 변경하면 일반적으로 controller의 로직도 변경이 된다.

Model -> httpServletRequest -> 임시 저장소에 잠깐 저장하기 ... setAttribute getAttribute를 이용해서 데이터를 다룰 수 있다.

